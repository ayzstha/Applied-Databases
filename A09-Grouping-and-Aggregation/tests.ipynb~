{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "grade": false,
     "grade_id": "b62d9c",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "# Tests for Activity 9"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "grade": false,
     "grade_id": "10248b",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "## Tests: Northwind"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false,
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "grade": true,
     "grade_id": "4392a0",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
   ],
   "source": [
    "# Test for part 1\n",
    "from nose.tools import assert_equal\n",
    "from csc270tools import get_table\n",
    "\n",
    "# Running the code in act9Northwind.sql to get the table for this part\n",
    "table = get_table('act9Northwind.sql', 'Northwind.db', 0)\n",
    "\n",
    "assert_equal(table[0][0], 77, 'Checking the value')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false,
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "grade": true,
     "grade_id": "4f6c12",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
   ],
   "source": [
    "# Test for part 2\n",
    "from nose.tools import assert_equal\n",
    "from csc270tools import get_table\n",
    "\n",
    "# Running the code in act9Northwind.sql to get the table for this part\n",
    "table = get_table('act9Northwind.sql', 'Northwind.db', 1)\n",
    "\n",
    "assert_equal(table[0][0], '1957-09-19', 'Checking the birthdate')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false,
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "grade": true,
     "grade_id": "8420e1",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
   ],
   "source": [
    "# Test for part 3\n",
    "from nose.tools import assert_equal\n",
    "from csc270tools import get_table\n",
    "\n",
    "# Running the code in act9Northwind.sql to get the table for this part\n",
    "table = get_table('act9Northwind.sql', 'Northwind.db', 2)\n",
    "\n",
    "# Partially checking your answer\n",
    "assert_equal(table[0], ('Western Europe', 276), 'Checking the first row')\n",
    "assert_equal(len(table), 9, 'Checking the number of rows')\n",
    "\n",
    "# There is a hidden test that will fully check your answer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false,
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "grade": true,
     "grade_id": "ee6738",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
   ],
   "source": [
    "# Test for part 4\n",
    "from nose.tools import assert_equal\n",
    "from csc270tools import get_table\n",
    "\n",
    "# Running the code in act9Northwind.sql to get the table for this part\n",
    "table = get_table('act9Northwind.sql', 'Northwind.db', 3)\n",
    "\n",
    "# Partially checking your answer\n",
    "assert_equal(table[0], ('Western Europe', 269), 'Checking the first row')\n",
    "assert_equal(len(table), 9, 'Checking the number of rows')\n",
    "\n",
    "# There is a hidden test that will fully check your answer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false,
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "grade": true,
     "grade_id": "08b404",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
   ],
   "source": [
    "# Test for part 5\n",
    "from nose.tools import assert_equal\n",
    "from csc270tools import get_table\n",
    "\n",
    "# Running the code in act9Northwind.sql to get the table for this part\n",
    "table = get_table('act9Northwind.sql', 'Northwind.db', 4)\n",
    "\n",
    "# Partially checking your answer\n",
    "assert_equal(table[0], ('British Isles', 75), 'Checking the first row')\n",
    "assert_equal(len(table), 3, 'Checking the number of rows')\n",
    "\n",
    "# There is a hidden test that will fully check your answer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false,
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "grade": true,
     "grade_id": "b8de59",
     "locked": true,
     "points": 2,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
   ],
   "source": [
    "# Test for part 6\n",
    "from nose.tools import assert_equal\n",
    "from csc270tools import get_table\n",
    "\n",
    "# Running the code in act9Northwind.sql to get the table for this part\n",
    "table, header = get_table('act9Northwind.sql', 'Northwind.db', 5, header=True)\n",
    "\n",
    "# Partially checking your answer\n",
    "assert_equal(header, ['Category', \n",
    "                      'Average unit price', \n",
    "                      'Total number of units in stock'], \n",
    "             'Checking the column names')\n",
    "\n",
    "assert_equal(table[0], ('Grains/Cereals', 20.25, 308), 'Checking the first row')\n",
    "assert_equal(len(table), 8, 'Checking the number of rows')\n",
    "\n",
    "# There is a hidden test that will fully check your answer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false,
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "grade": true,
     "grade_id": "2fcdc1",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
   ],
   "source": [
    "# Test for part 7\n",
    "from nose.tools import assert_equal\n",
    "from csc270tools import get_table\n",
    "\n",
    "# Running the code in act9Northwind.sql to get the table for this part\n",
    "table = get_table('act9Northwind.sql', 'Northwind.db', 6)\n",
    "\n",
    "# Partially checking your answer\n",
    "assert_equal(table[0], ('Meat/Poultry', 15.725, 136), 'Checking the first row')\n",
    "assert_equal(len(table), 8, 'Checking the number of rows')\n",
    "\n",
    "# There is a hidden test that will fully check your answer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false,
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "grade": true,
     "grade_id": "ed97eb",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
   ],
   "source": [
    "# Test for part 8\n",
    "from nose.tools import assert_equal\n",
    "from csc270tools import get_table\n",
    "\n",
    "# Running the code in act9Northwind.sql to get the table for this part\n",
    "table = get_table('act9Northwind.sql', 'Northwind.db', 7)\n",
    "\n",
    "# Partially checking your answer\n",
    "assert_equal(table[0], ('Seafood', 20.6825, 701), 'Checking the first row')\n",
    "assert_equal(len(table), 5, 'Checking the number of rows')\n",
    "\n",
    "# There is a hidden test that will fully check your answer"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "grade": false,
     "grade_id": "e86b84",
     "locked": true,
     "remove": false,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "## Tests: Chinook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false,
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "grade": true,
     "grade_id": "722bf7",
     "locked": true,
     "points": 3,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
   ],
   "source": [
    "# Test for part 1\n",
    "from nose.tools import assert_equal\n",
    "from csc270tools import get_table\n",
    "\n",
    "# Running the code in act9Chinook.sql to get the table for this part\n",
    "table, header = get_table('act9Chinook.sql', 'Chinook.db', 0, header=True)\n",
    "\n",
    "# Partially checking your answer\n",
    "assert_equal(header, ['Metallica Albums', \n",
    "                      'Number of Tracks', \n",
    "                      'Min', \n",
    "                      'Max', \n",
    "                      'Average'], \n",
    "             'Checking the column names')\n",
    "\n",
    "assert_equal(table[0], ('...And Justice For All', 9, 5.23, 9.81, 7.28), 'Checking the first row')\n",
    "assert_equal(len(table), 10, 'Checking the number of rows')\n",
    "\n",
    "# There is a hidden test that will fully check your answer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false,
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "grade": true,
     "grade_id": "97498f",
     "locked": true,
     "points": 2,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
   ],
   "source": [
    "# Test for part 2\n",
    "from nose.tools import assert_equal\n",
    "from csc270tools import get_table\n",
    "\n",
    "# Running the code in act9Chinook.sql to get the table for this part\n",
    "table, header = get_table('act9Chinook.sql', 'Chinook.db', 1, header=True)\n",
    "\n",
    "# Partially checking your answer\n",
    "assert_equal(header, ['Average Track Length', 'Genre'], 'Checking the column names')\n",
    "assert_equal(table[0], (4.4, 'Alternative'), 'Checking the first row')\n",
    "assert_equal(len(table), 25, 'Checking the number of rows')\n",
    "\n",
    "# There is a hidden test that will fully check your answer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "collapsed": false,
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "grade": true,
     "grade_id": "524452",
     "locked": true,
     "points": 2,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
   ],
   "source": [
    "# Test for part 3\n",
    "from nose.tools import assert_equal\n",
    "from csc270tools import get_table\n",
    "\n",
    "# Running the code in act9Chinook.sql to get the table for this part\n",
    "table, header = get_table('act9Chinook.sql', 'Chinook.db', 2, header=True)\n",
    "\n",
    "# Partially checking your answer\n",
    "assert_equal(header, ['Average Track Length', 'Genre', 'Media Type'], 'Checking the column names')\n",
    "assert_equal(table[0], (5.94, 'Classical', 'AAC audio file'), 'Checking the first row')\n",
    "assert_equal(len(table), 38, 'Checking the number of rows')\n",
    "\n",
    "# There is a hidden test that will fully check your answer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "collapsed": false,
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "grade": true,
     "grade_id": "34fdb2",
     "locked": true,
     "points": 2,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
   ],
   "source": [
    "# Test for part 4\n",
    "from nose.tools import assert_equal\n",
    "from csc270tools import get_table\n",
    "\n",
    "# Running the code in act9Chinook.sql to get the table for this part\n",
    "table = get_table('act9Chinook.sql', 'Chinook.db', 3)\n",
    "\n",
    "# Partially checking your answer\n",
    "assert_equal(table[0], ('Iron Maiden', 213), 'Checking the first row')\n",
    "assert_equal(len(table), 4, 'Checking the number of rows')\n",
    "\n",
    "# There is a hidden test that will fully check your answer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "collapsed": false,
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "grade": true,
     "grade_id": "46e3b5",
     "locked": true,
     "points": 3,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
   ],
   "source": [
    "# Test for part 5\n",
    "from nose.tools import assert_equal\n",
    "from csc270tools import get_table\n",
    "\n",
    "# Running the code in act9Chinook.sql to get the table for this part\n",
    "table = get_table('act9Chinook.sql', 'Chinook.db', 4)\n",
    "\n",
    "# Partially checking your answer\n",
    "assert_equal(table[0], ('Iron Maiden', 19.96), 'Checking the first row')\n",
    "assert_equal(len(table), 7, 'Checking the number of rows')\n",
    "\n",
    "# There is a hidden test that will fully check your answer"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "argv": [
    "/usr/bin/python3",
    "-m",
    "ipykernel",
    "--HistoryManager.enabled=False",
    "--matplotlib=inline",
    "-c",
    "%config InlineBackend.figure_formats = set(['retina'])\nimport matplotlib; matplotlib.rcParams['figure.figsize'] = (12, 7)",
    "-f",
    "{connection_file}"
   ],
   "display_name": "Python 3 (system-wide)",
   "env": {
   },
   "language": "python",
   "metadata": {
    "cocalc": {
     "description": "Python 3 programming language",
     "priority": 100,
     "url": "https://www.python.org/"
    }
   },
   "name": "python3",
   "resource_dir": "/ext/jupyter/kernels/python3"
  },
  "nbgrader": {
   "cocalc_minimal_stubs": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}